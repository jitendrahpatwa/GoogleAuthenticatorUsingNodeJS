{
  "_args": [
    [
      {
        "raw": "window-or-global@^1.0.1",
        "scope": null,
        "escapedName": "window-or-global",
        "name": "window-or-global",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "C:\\Imp\\node\\app\\node_modules\\can-promise"
    ]
  ],
  "_from": "window-or-global@>=1.0.1 <2.0.0",
  "_id": "window-or-global@1.0.1",
  "_inCache": true,
  "_location": "/window-or-global",
  "_nodeVersion": "3.2.0",
  "_npmUser": {
    "name": "ruffle1986",
    "email": "ftamas.mail@gmail.com"
  },
  "_npmVersion": "2.13.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "window-or-global@^1.0.1",
    "scope": null,
    "escapedName": "window-or-global",
    "name": "window-or-global",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/can-promise"
  ],
  "_resolved": "https://registry.npmjs.org/window-or-global/-/window-or-global-1.0.1.tgz",
  "_shasum": "dbe45ba2a291aabc56d62cf66c45b7fa322946de",
  "_shrinkwrap": null,
  "_spec": "window-or-global@^1.0.1",
  "_where": "C:\\Imp\\node\\app\\node_modules\\can-promise",
  "author": {
    "name": "ruffle1986",
    "email": "tf@purposeindustries.co"
  },
  "bugs": {
    "url": "https://github.com/purposeindustries/window-or-global/issues"
  },
  "dependencies": {},
  "description": "Use either the window object in the browser or the global object in node.",
  "devDependencies": {
    "ava": "^0.2.0",
    "browserify": "^11.1.0",
    "component-emitter": "^1.2.0",
    "jsdom": "^6.5.0",
    "proxyquire": "^1.7.2",
    "react": "^0.13.3",
    "xo": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "dbe45ba2a291aabc56d62cf66c45b7fa322946de",
    "tarball": "https://registry.npmjs.org/window-or-global/-/window-or-global-1.0.1.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "3a2f8bd7a3553b359b0c34c2e622249e0902633b",
  "homepage": "https://github.com/purposeindustries/window-or-global#readme",
  "keywords": [
    "window",
    "global",
    "isomorphic",
    "universal"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "ruffle1986",
      "email": "ftamas.mail@gmail.com"
    }
  ],
  "name": "window-or-global",
  "optionalDependencies": {},
  "readme": "window-or-global\n================\n\nUse this module to get the global object both on server and client side.\nNo more `window is not defined` errors just peace and flowers.\n\nAdvantages:\n\n- You can easily mock it by [mockery](https://www.npmjs.com/package/mockery) or [proxyquire](https://www.npmjs.com/package/proxyquire) in your tests\n- It's really useful in case of universal (or isomorphic) code, for example, when you'd like to render a [React](http://facebook.github.io/react/) component both on client and server side\n\n## Install\n\n```sh\n$ npm i window-or-global\n```\n\n## Usage\n\n```js\nimport root from 'window-or-global'\n```\n\n## React example\n\n`components/my-component.jsx:`\n\n```js\nimport React, { Component } from 'react'\n// in node, you'll get the global object instead of crashing by an error\nimport root from 'window-or-global'\n\nclass MyComponent extends Component {\n\n  // this method is only invoked in the browser environment\n  componentDidMount() {\n    root.addEventListener(/*...*/)\n  }\n\n  componentWillUnmount() {\n    root.addEventListener(/*...*/)\n  }\n\n  render() {}\n\n}\n\n// VoilÃ . Enjoy your universal react component! ;)\n// No more 'window is not defined' errors when you render your component\n// on server side.\n\n```\n\n## Unit-testing example\n\nYou can find a complete test example [here](examples/react). The test passes of course, just type\n\n```sh\n$ npm test\n```\n\nin your terminal.\n\n## License\n\n[MIT](LICENSE) &copy; Purpose Industries\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/purposeindustries/window-or-global.git"
  },
  "scripts": {
    "posttest": "ava examples/**/*.spec.js",
    "test": "xo"
  },
  "version": "1.0.1",
  "xo": {
    "envs": [
      "node",
      "browser"
    ],
    "space": true,
    "semicolon": false
  }
}
